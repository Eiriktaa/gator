// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING  id, created_at, updated_at, last_fetched_at, name, url, user_id
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :one
SELECT feeds.id as id, feeds.name as name, url, users.name as username
FROM feeds
INNER JOIN users ON users.id = feeds.user_id
WHERE url = $1
`

type GetFeedRow struct {
	ID       uuid.UUID
	Name     string
	Url      string
	Username string
}

func (q *Queries) GetFeed(ctx context.Context, url string) (GetFeedRow, error) {
	row := q.db.QueryRowContext(ctx, getFeed, url)
	var i GetFeedRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Username,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name as name, url, users.name as username
FROM feeds
INNER JOIN users ON users.id = feeds.user_id
`

type GetFeedsRow struct {
	Name     string
	Url      string
	Username string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, created_at, updated_at, last_fetched_at, name, url, user_id 
FROM feeds
ORDER BY last_fetched_at 
ASC NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const markFeedFetch = `-- name: MarkFeedFetch :one
UPDATE feeds
    SET last_fetched_at = $1, updated_at = $1
    WHERE feeds.id = $2
RETURNING id, created_at, updated_at, last_fetched_at, name, url, user_id
`

type MarkFeedFetchParams struct {
	LastFetchedAt sql.NullTime
	ID            uuid.UUID
}

func (q *Queries) MarkFeedFetch(ctx context.Context, arg MarkFeedFetchParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, markFeedFetch, arg.LastFetchedAt, arg.ID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}
