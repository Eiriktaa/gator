// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH
  inserted_feed as (
    INSERT INTO
      feed_follow (id, created_at, updated_at, user_id, feed_id)
    VALUES
      ($1, $2, $3, $4, $5)
    RETURNING
      id, created_at, updated_at, user_id, feed_id
  )
SELECT
  inserted_feed.id,
  inserted_feed.created_at,
  inserted_feed.updated_at,
  inserted_feed.user_id,
  inserted_feed.feed_id,
  users.name as user_name,
  feeds.name as feed_name
FROM
  inserted_feed
  INNER JOIN users on users.id = inserted_feed.user_id
  INNER JOIN feeds on feeds.id = inserted_feed.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFollowing = `-- name: DeleteFollowing :one
DELETE FROM feed_follow
WHERE feed_id IN (
    SELECT feeds.id 
    FROM feed_follow
    INNER JOIN feeds on feeds.id = feed_follow.feed_id
    WHERE feed_follow.user_id =$1 and feeds.url= $2
)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type DeleteFollowingParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFollowing(ctx context.Context, arg DeleteFollowingParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, deleteFollowing, arg.UserID, arg.Url)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFollowings = `-- name: GetFollowings :many
SELECT
  feeds.name as feed_name
FROM
  feed_follow
  INNER JOIN users on users.id = feed_follow.user_id
  INNER JOIN feeds on feeds.id = feed_follow.feed_id
WHERE users.id = $1
`

func (q *Queries) GetFollowings(ctx context.Context, id uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowings, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var feed_name string
		if err := rows.Scan(&feed_name); err != nil {
			return nil, err
		}
		items = append(items, feed_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
